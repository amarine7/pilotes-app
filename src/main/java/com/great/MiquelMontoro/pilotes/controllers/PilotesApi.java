/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.30).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.great.MiquelMontoro.pilotes.controllers;

import com.great.MiquelMontoro.pilotes.dto.ErrorResponse;
import com.great.MiquelMontoro.pilotes.dto.Order;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-30T09:06:59.005Z[GMT]")
@Validated
public interface PilotesApi {

    @Operation(summary = "create a pilotes", description = "", tags = {"create"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),

            @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))})
    @RequestMapping(value = "/api/create-your-pilotes",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Order> createPilotes(@Parameter(in = ParameterIn.HEADER, description = "", required = true, schema = @Schema())
                                       @RequestHeader(value = "Content-Type", required = true)
                                               String contentType,
                                        @Parameter(in = ParameterIn.DEFAULT, description = "create a pilotes", required = true, schema = @Schema())
                                       @Valid @RequestBody
                                               Order body);

    @Operation(summary = "Find a pilotes", description = "", tags={ "search" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))),

            @ApiResponse(responseCode = "400", description = "Invalid input", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/search-pilotes",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Order>> findPilotes(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema())
                                            @RequestHeader(value="Content-Type", required=true)
                                                    String contentType,
                                            @Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema())
                                            @RequestHeader(value="Authorization", required=true)
                                                    String authorization,
                                            @Parameter(in = ParameterIn.QUERY, description = "id of a customer" ,schema=@Schema())
                                            @Valid @RequestParam(value = "customerId", required = false)
                                                    Long customerId,
                                            @Parameter(in = ParameterIn.QUERY, description = "id of an order" ,schema=@Schema())
                                            @Valid @RequestParam(value = "orderId", required = false)
                                                    Long orderId,
                                            @Parameter(in = ParameterIn.QUERY, description = "first name of the customer of an order" ,schema=@Schema())
                                            @Valid @RequestParam(value = "firstName", required = false)
                                                    String firstName,
                                            @Parameter(in = ParameterIn.QUERY, description = "last name of the customer of an order" ,schema=@Schema())
                                            @Valid @RequestParam(value = "lastName", required = false)
                                                    String lastName,
                                            @Parameter(in = ParameterIn.QUERY, description = "delivery address of the customer of an order" ,schema=@Schema())
                                            @Valid @RequestParam(value = "deliveryAddress", required = false)
                                                    String deliveryAddress);


    @Operation(summary = "Update a pilotes order", description = "", tags={ "update" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),

            @ApiResponse(responseCode = "400", description = "Invalid input data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "404", description = "Data not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/update-pilotes",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Order> updatePilotes(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema())
                                       @RequestHeader(value="Content-Type", required=true)
                                               String contentType,
                                        @Parameter(in = ParameterIn.QUERY, description = "order id to update", required=true, schema=@Schema())
                                       @Valid @RequestParam(value = "id", required = false)
                                               Long id,
                                        @Parameter(in = ParameterIn.DEFAULT, description = "updated order", required=true, schema=@Schema())
                                       @Valid @RequestBody Order body);
}
